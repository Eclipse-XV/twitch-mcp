# syntax=docker/dockerfile:1

# --- Build stage: compile Java app (Quarkus, Java 21) ---
FROM maven:3.9.9-eclipse-temurin-21 AS build
WORKDIR /build

# Leverage dependency cache
COPY pom.xml ./
RUN --mount=type=cache,target=/root/.m2 mvn -B dependency:go-offline -DskipTests

# Copy sources and build
COPY src ./src
# Remove legacy REST resource that requires JAX-RS and is not used by MCP stdio
RUN rm -f src/main/java/be/tomcools/twitchmcp/api/ChatResource.java || true

RUN --mount=type=cache,target=/root/.m2 \
    mvn -B package -DskipTests && \
    sh -lc 'set -e; \
      JAR=$(ls -1 target/*-runner.jar 2>/dev/null || true); \
      if [ -z "$JAR" ]; then JAR=$(ls -1 target/*-runner-*.jar 2>/dev/null || true); fi; \
      if [ -z "$JAR" ]; then JAR=$(ls -1 target/*-all.jar 2>/dev/null || true); fi; \
      if [ -z "$JAR" ]; then JAR=$(ls -1 target/*SNAPSHOT*.jar 2>/dev/null | head -n1 || true); fi; \
      if [ -z "$JAR" ]; then echo "Could not find built jar in target/" >&2; exit 1; fi; \
      cp "$JAR" /build/app.jar'

# --- Runtime stage: Java 21 JRE + Node 20 + mcp-proxy ---
FROM eclipse-temurin:21-jre-jammy AS runtime

# Install Node 20 and mcp-proxy
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates curl gnupg && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    npm i -g mcp-proxy@5.5.4 && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /app
COPY --from=build /build/app.jar /app/app.jar

EXPOSE 8080

# mcp-proxy will listen on 8080 and spawn Java MCP stdio server
ENTRYPOINT ["mcp-proxy", "--", "java", "-Dquarkus.http.host=0.0.0.0", "-jar", "/app/app.jar"]
